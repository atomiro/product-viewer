function CameraDollyControl(camera,rendererElement){function init(){rendererElement.mousemove(onMouseMove),rendererElement.mousedown(onMouseDown),rendererElement.mouseup(onMouseUp),rendererElement.hover(onHoverIn,onHoverOut);_.debounce(onMouseWheel,10,{leading:!0});$(window).on("mousewheel",onMouseWheel),rendererElement[0].addEventListener("touchmove",onTouchMove,!1),rendererElement[0].addEventListener("touchend",onTouchEnd,!1),rendererElement[0].addEventListener("touchstart",onTouchStart,!1)}function onMouseMove(event){if(Math.abs(cameraDist)<obj.panLockAt){var delta=getMouseMoveDelta(event);Math.abs(delta[1])>Math.abs(delta[0])&&(cameraHeight-=.04*delta[1],constrainVerticalPan(obj.minCameraHeight,obj.maxCameraHeight),camera.position.y=cameraHeight,camera.lookAt(new THREE.Vector3(0,cameraHeight,0)))}}function onMouseWheel(event){if(mouseIn){event.preventDefault();var deltaY=ControlUtils.clamp(event.originalEvent.deltaY,-100,100);cameraDist-=.2*deltaY,constrainZoom(obj.minZoomDistance,obj.maxZoomDistance),camera.position.x=cameraDist,centerCamera()}}function onMouseDown(event){mouseDown=!0}function onMouseUp(event){mouseDown=!1}function onHoverIn(event){mouseIn=!0}function onHoverOut(event){mouseIn=!1}function onTouchStart(event){if(touchStartTime=event.timeStamp,1==event.touches.length&&(initMouseY=event.touches[0].pageY),2==event.touches.length){var dx=event.touches[0].pageX-event.touches[1].pageX,dy=event.touches[0].pageY-event.touches[1].pageY;currentDist=Math.sqrt(dx*dx+dy*dy),lastDist=currentDist}}function onTouchMove(event){if(event.preventDefault(),1==event.touches.length){if(Math.abs(cameraDist)<obj.panLockAt){var delta=getTouchMoveVertical(event),speed=delta/(event.timeStamp-touchStartTime);cameraHeight-=5*speed,constrainVerticalPan(obj.minCameraHeight,obj.maxCameraHeight),camera.position.y=cameraHeight,camera.lookAt(new THREE.Vector3(0,cameraHeight,0))}}else if(2==event.touches.length){var dx=event.touches[0].pageX-event.touches[1].pageX,dy=event.touches[0].pageY-event.touches[1].pageY;currentDist=Math.sqrt(dx*dx+dy*dy);var distDelta=currentDist-lastDist,speed=distDelta/(touchStartTime-event.timeStamp);lastDist=currentDist,distDelta=.5*distDelta,cameraDist+=distDelta,constrainZoom(obj.minZoomDistance,obj.maxZoomDistance),camera.position.x=cameraDist,centerCamera()}}function onTouchEnd(event){initMouseY=mouseY}function centerCamera(){var totalZoomDist=Math.abs(obj.minZoomDistance-obj.maxZoomDistance),zoomLevel=Math.abs(cameraDist-obj.minZoomDistance)/totalZoomDist;cameraHeight=ControlUtils.lerp(cameraHeight,initHeight,zoomLevel),camera.position.y=cameraHeight,camera.lookAt(new THREE.Vector3(0,cameraHeight,0))}function constrainZoom(min,max){Math.abs(cameraDist)<Math.abs(min)&&(cameraDist=min),Math.abs(cameraDist)>Math.abs(max)&&(cameraDist=max)}function constrainVerticalPan(min,max){cameraHeight=ControlUtils.clamp(cameraHeight,min,max)}function getTouchMoveVertical(event){mouseY=event.touches[0].pageY;var touchDelta=initMouseY-mouseY;return initMouseY=mouseY,touchDelta}function getMouseMoveDelta(event){var deltaX=0,deltaY=0;return mouseDown&&(deltaX=mouseX-event.pageX,deltaY=mouseY-event.pageY),mouseX=event.pageX,mouseY=event.pageY,[deltaX,deltaY]}this.minZoomDistance=-20,this.maxZoomDistance=-50,this.minCameraHeight=2.5,this.maxCameraHeight=14.5,this.panLockAt=Math.abs(this.maxZoomDistance)-3;var touchStartTime,initHeight=camera.position.y,cameraHeight=camera.position.y,cameraDist=camera.position.x,mouseDown=!1,mouseIn=!1,mouseX=0,initMouseY=0,mouseY=0,obj=this;return init(),this}function MeshControl(meshes,rendererElement){function init(){rendererElement.mousedown(onMouseDown),rendererElement.mouseup(onMouseUp),rendererElement.mousemove(onMouseMove),rendererElement[0].addEventListener("touchmove",onTouchMove,!1),rendererElement[0].addEventListener("touchend",onTouchEnd,!1),rendererElement[0].addEventListener("touchstart",onTouchStart,!1)}function onMouseMove(event){var delta=getMouseMoveDelta(event);if(Math.abs(delta[0])>Math.abs(delta[1])){var deltaX=ControlUtils.clamp(delta[0],-30,30),angle=deltaX*Math.PI/180*obj.mouseSpeed;rotateTo(angle)}}function onMouseDown(event){mouseDown=!0}function onMouseUp(event){mouseDown=!1}function onTouchStart(event){touchStartTime=event.timeStamp,1==event.touches.length&&(touchDeltaY=0,initMouseX=event.touches[0].pageX,initMouseY=event.touches[0].pageY)}function onTouchMove(event){if(event.preventDefault(),1==event.touches.length){getTouchMoveDelta(event),touchDeltaX=ControlUtils.clamp(touchDeltaX,-80,80);var speed=touchDeltaX/(event.timeStamp-touchStartTime);angle=.4*speed,console.log(speed,angle),rotateTo(angle)}}function onTouchEnd(event){touchDeltaX=0,touchDeltaY=0}function rotateTo(angle){for(var i=0;i<meshes.length;i++)mesh=meshes[i],mesh.rotateOnAxis(new THREE.Vector3(0,1,0),-angle)}function getTouchMoveDelta(event){touchDeltaX=initMouseX-mouseX,touchDeltaY=initMouseY-mouseY,mouseX=event.touches[0].pageX,mouseY=event.touches[0].pageY}function getMouseMoveDelta(event){var deltaX=0,deltaY=0;return mouseDown&&(deltaX=mouseX-event.pageX,deltaY=mouseY-event.pageY),mouseX=event.pageX,mouseY=event.pageY,[deltaX,deltaY]}var touchStartTime,mouseX=0,mouseY=0,initMouseX=0,touchDeltaX=0,initMouseY=0,touchDeltaY=0,mouseDown=!1;this.meshes=meshes,this.rotationSpeed=8,this.mouseSpeed=this.rotationSpeed/10,this.setRotationSpeed=function(speed){this.rotationSpeed=speed,this.mouseSpeed=speed/10};var obj=this;return init(),this}function Viewer(textureArray,element,options){function loadScene(){var sceneFile=settings.assetPath+settings.sceneFile,objloader=new THREE.ObjectLoader;objloader.load(sceneFile,setup,function(xhr){console.log("Scene "+sceneFile+" "+Math.round(xhr.loaded/xhr.total*100)+"%")},function(xhr){console.log(xhr)})}function setup(sceneFile){renderer=new THREE.WebGLRenderer({antialias:!0}),renderer.setPixelRatio(DEVICE_PIXEL_RATIO),renderer.setSize(canvasWidth,canvasHeight),rendererElement.append(renderer.domElement),scene=sceneFile,scene.background=new THREE.Color(settings.sceneBackgroundColor);var grid=new THREE.GridHelper(200,50,255,8421504);scene.add(grid),textureManager=new THREE.LoadingManager,textureManager.onError=function(event){console.log("manager error"),console.log(event)},textureManager.onProgress=function(event){console.log("manager progress"),console.log(event)},textureManager.onLoad=function(event){0==initialized&&(setupMeshes(),setupCamera(),render(),event=$.Event("viewer.loaded"),rendererElement.trigger(event),initialized=!0)};for(var i=0;i<textureArray.length;i++)loadTexture(textureArray[i])}function setupCamera(){camera=new THREE.PerspectiveCamera(settings.fov,settings.aspectRatio,CAM_NEAR_PLANE,CAM_FAR_PLANE),camera.position.x=settings.cameraXPosition,camera.position.y=settings.cameraYPosition,camera.lookAt(new THREE.Vector3(0,settings.cameraYPosition,0)),cameraControl=new CameraDollyControl(camera,rendererElement)}function setupMeshes(){for(var i=0;i<scene.children.length;i++)object=scene.children[i],"Mesh"==object.type&&(object.rotation.y=settings.initialRotation*Math.PI/180,meshes.push(object),object.material.map=textures[0]);meshes[1].visible=!1,meshes[0].visible=!0,meshControl=new MeshControl(meshes,rendererElement)}function getTextureByName(name){for(var texture,i=0;i<textures.length;i++)textures[i].name==name&&(texture=textures[i]);return texture}function loadTexture(textureFileName){texturePath=settings.assetPath+textureFileName,textureLoader=new THREE.TextureLoader(textureManager),textureLoader.load(texturePath,function(texture){console.log("loader success"),storeTexture(texture,textureFileName)},function(xhr){console.log("Texture "+textureFileName+" "+Math.round(xhr.loaded/xhr.total*100)+"%")},function(xhr){console.log("loader error"),console.log(xhr)})}function storeTexture(texture,filename){texture.name=filename,textures.push(texture)}function updateTexture(texture,mesh){texture.needsUpdate=!0,mesh.material.map=texture}function debounceResize(element){var debounce=_.debounce(resizeRenderer,200,{leading:!0});debounce(element)}function resizeRenderer(element){canvasWidth=rendererElement.width(),canvasHeight=canvasWidth/settings.aspectRatio,renderer.setSize(canvasWidth,canvasHeight),camera.updateProjectionMatrix()}function render(){requestAnimationFrame(render),renderer.render(scene,camera)}var settings={assetPath:"assets/",sceneFile:"models_scene.json",fov:23,aspectRatio:.8,cameraXPosition:-50,cameraYPosition:8.5,initialRotation:-90,sceneBackgroundColor:"rgb(100, 100, 100)"};this.create=function(){$.extend(settings,options),loadScene(),$(window).resize(function(){debounceResize(element)})},this.toggleModels=function(){var plusModel=meshes[1],straightModel=meshes[0];1==straightModel.visible?(plusModel.visible=!0,straightModel.visible=!1):(straightModel.visible=!0,plusModel.visible=!1),event=$.Event("viewer.togglemodel"),rendererElement.trigger(event)},this.switchTexture=function(name){for(var i=0;i<scene.children.length;i++)object=scene.children[i],"Mesh"==object.type&&updateTexture(getTextureByName(name),object);event=$.Event("viewer.switchtexture"),rendererElement.trigger(event)},this.addTexture=loadTexture,this.create();var scene,camera,renderer,meshControl,textureManager,initialized=!1,meshes=[],textures=[],rendererElement=element,canvasWidth=rendererElement.width(),canvasHeight=canvasWidth/settings.aspectRatio,DEVICE_PIXEL_RATIO=window.devicePixelRatio?window.devicePixelRatio:1,CAM_FAR_PLANE=100,CAM_NEAR_PLANE=.1;return this}var ControlUtils={clamp:function(value,min,max){var clampedValue=value>max?max:value<min?min:value;return clampedValue},lerp:function(p0,p1,progress){ControlUtils.clamp(progress,0,1);var pu=p0+(p1-p0)*progress;return pu}};
//# sourceMappingURL=viewer.min.js.map